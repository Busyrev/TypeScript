=== tests/cases/conformance/types/conditional/conditionalTypes2.ts ===
interface Covariant<T> {
>Covariant : Symbol(Covariant, Decl(conditionalTypes2.ts, 0, 0))
>T : Symbol(T, Decl(conditionalTypes2.ts, 0, 20))

    foo: T extends string ? T : number;
>foo : Symbol(Covariant.foo, Decl(conditionalTypes2.ts, 0, 24))
>T : Symbol(T, Decl(conditionalTypes2.ts, 0, 20))
>T : Symbol(T, Decl(conditionalTypes2.ts, 0, 20))
}

interface Contravariant<T> {
>Contravariant : Symbol(Contravariant, Decl(conditionalTypes2.ts, 2, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 4, 24))

    foo: T extends string ? keyof T : number;
>foo : Symbol(Contravariant.foo, Decl(conditionalTypes2.ts, 4, 28))
>T : Symbol(T, Decl(conditionalTypes2.ts, 4, 24))
>T : Symbol(T, Decl(conditionalTypes2.ts, 4, 24))
}

interface Invariant<T> {
>Invariant : Symbol(Invariant, Decl(conditionalTypes2.ts, 6, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 8, 20))

    foo: T extends string ? keyof T : T;
>foo : Symbol(Invariant.foo, Decl(conditionalTypes2.ts, 8, 24))
>T : Symbol(T, Decl(conditionalTypes2.ts, 8, 20))
>T : Symbol(T, Decl(conditionalTypes2.ts, 8, 20))
>T : Symbol(T, Decl(conditionalTypes2.ts, 8, 20))
}

function f1<A, B extends A>(a: Covariant<A>, b: Covariant<B>) {
>f1 : Symbol(f1, Decl(conditionalTypes2.ts, 10, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 12, 12))
>B : Symbol(B, Decl(conditionalTypes2.ts, 12, 14))
>A : Symbol(A, Decl(conditionalTypes2.ts, 12, 12))
>a : Symbol(a, Decl(conditionalTypes2.ts, 12, 28))
>Covariant : Symbol(Covariant, Decl(conditionalTypes2.ts, 0, 0))
>A : Symbol(A, Decl(conditionalTypes2.ts, 12, 12))
>b : Symbol(b, Decl(conditionalTypes2.ts, 12, 44))
>Covariant : Symbol(Covariant, Decl(conditionalTypes2.ts, 0, 0))
>B : Symbol(B, Decl(conditionalTypes2.ts, 12, 14))

    a = b;
>a : Symbol(a, Decl(conditionalTypes2.ts, 12, 28))
>b : Symbol(b, Decl(conditionalTypes2.ts, 12, 44))

    b = a;  // Error
>b : Symbol(b, Decl(conditionalTypes2.ts, 12, 44))
>a : Symbol(a, Decl(conditionalTypes2.ts, 12, 28))
}

function f2<A, B extends A>(a: Contravariant<A>, b: Contravariant<B>) {
>f2 : Symbol(f2, Decl(conditionalTypes2.ts, 15, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 17, 12))
>B : Symbol(B, Decl(conditionalTypes2.ts, 17, 14))
>A : Symbol(A, Decl(conditionalTypes2.ts, 17, 12))
>a : Symbol(a, Decl(conditionalTypes2.ts, 17, 28))
>Contravariant : Symbol(Contravariant, Decl(conditionalTypes2.ts, 2, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 17, 12))
>b : Symbol(b, Decl(conditionalTypes2.ts, 17, 48))
>Contravariant : Symbol(Contravariant, Decl(conditionalTypes2.ts, 2, 1))
>B : Symbol(B, Decl(conditionalTypes2.ts, 17, 14))

    a = b;  // Error
>a : Symbol(a, Decl(conditionalTypes2.ts, 17, 28))
>b : Symbol(b, Decl(conditionalTypes2.ts, 17, 48))

    b = a;
>b : Symbol(b, Decl(conditionalTypes2.ts, 17, 48))
>a : Symbol(a, Decl(conditionalTypes2.ts, 17, 28))
}

function f3<A, B extends A>(a: Invariant<A>, b: Invariant<B>) {
>f3 : Symbol(f3, Decl(conditionalTypes2.ts, 20, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 22, 12))
>B : Symbol(B, Decl(conditionalTypes2.ts, 22, 14))
>A : Symbol(A, Decl(conditionalTypes2.ts, 22, 12))
>a : Symbol(a, Decl(conditionalTypes2.ts, 22, 28))
>Invariant : Symbol(Invariant, Decl(conditionalTypes2.ts, 6, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 22, 12))
>b : Symbol(b, Decl(conditionalTypes2.ts, 22, 44))
>Invariant : Symbol(Invariant, Decl(conditionalTypes2.ts, 6, 1))
>B : Symbol(B, Decl(conditionalTypes2.ts, 22, 14))

    a = b;  // Error
>a : Symbol(a, Decl(conditionalTypes2.ts, 22, 28))
>b : Symbol(b, Decl(conditionalTypes2.ts, 22, 44))

    b = a;  // Error
>b : Symbol(b, Decl(conditionalTypes2.ts, 22, 44))
>a : Symbol(a, Decl(conditionalTypes2.ts, 22, 28))
}

// Repros from #22860

class Opt<T> {
>Opt : Symbol(Opt, Decl(conditionalTypes2.ts, 25, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 29, 10))

    toVector(): Vector<T> {
>toVector : Symbol(Opt.toVector, Decl(conditionalTypes2.ts, 29, 14))
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 29, 10))

        return <any>undefined;
>undefined : Symbol(undefined)
    }
}

interface Seq<T> {
>Seq : Symbol(Seq, Decl(conditionalTypes2.ts, 33, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 35, 14))

    tail(): Opt<Seq<T>>;
>tail : Symbol(Seq.tail, Decl(conditionalTypes2.ts, 35, 18))
>Opt : Symbol(Opt, Decl(conditionalTypes2.ts, 25, 1))
>Seq : Symbol(Seq, Decl(conditionalTypes2.ts, 33, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 35, 14))
}

class Vector<T> implements Seq<T> {
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))
>Seq : Symbol(Seq, Decl(conditionalTypes2.ts, 33, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))

    tail(): Opt<Vector<T>> {
>tail : Symbol(Vector.tail, Decl(conditionalTypes2.ts, 39, 35))
>Opt : Symbol(Opt, Decl(conditionalTypes2.ts, 25, 1))
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))

        return <any>undefined;
>undefined : Symbol(undefined)
    }
    partition2<U extends T>(predicate:(v:T)=>v is U): [Vector<U>,Vector<Exclude<T, U>>];
>partition2 : Symbol(Vector.partition2, Decl(conditionalTypes2.ts, 42, 5), Decl(conditionalTypes2.ts, 43, 88), Decl(conditionalTypes2.ts, 44, 64))
>U : Symbol(U, Decl(conditionalTypes2.ts, 43, 15))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))
>predicate : Symbol(predicate, Decl(conditionalTypes2.ts, 43, 28))
>v : Symbol(v, Decl(conditionalTypes2.ts, 43, 39))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))
>v : Symbol(v, Decl(conditionalTypes2.ts, 43, 39))
>U : Symbol(U, Decl(conditionalTypes2.ts, 43, 15))
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))
>U : Symbol(U, Decl(conditionalTypes2.ts, 43, 15))
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))
>Exclude : Symbol(Exclude, Decl(lib.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))
>U : Symbol(U, Decl(conditionalTypes2.ts, 43, 15))

    partition2(predicate:(x:T)=>boolean): [Vector<T>,Vector<T>];
>partition2 : Symbol(Vector.partition2, Decl(conditionalTypes2.ts, 42, 5), Decl(conditionalTypes2.ts, 43, 88), Decl(conditionalTypes2.ts, 44, 64))
>predicate : Symbol(predicate, Decl(conditionalTypes2.ts, 44, 15))
>x : Symbol(x, Decl(conditionalTypes2.ts, 44, 26))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))

    partition2<U extends T>(predicate:(v:T)=>boolean): [Vector<U>,Vector<any>] {
>partition2 : Symbol(Vector.partition2, Decl(conditionalTypes2.ts, 42, 5), Decl(conditionalTypes2.ts, 43, 88), Decl(conditionalTypes2.ts, 44, 64))
>U : Symbol(U, Decl(conditionalTypes2.ts, 45, 15))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))
>predicate : Symbol(predicate, Decl(conditionalTypes2.ts, 45, 28))
>v : Symbol(v, Decl(conditionalTypes2.ts, 45, 39))
>T : Symbol(T, Decl(conditionalTypes2.ts, 39, 13))
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))
>U : Symbol(U, Decl(conditionalTypes2.ts, 45, 15))
>Vector : Symbol(Vector, Decl(conditionalTypes2.ts, 37, 1))

        return <any>undefined;
>undefined : Symbol(undefined)
    }
}

interface A1<T> {
>A1 : Symbol(A1, Decl(conditionalTypes2.ts, 48, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 50, 13))

    bat: B1<A1<T>>;
>bat : Symbol(A1.bat, Decl(conditionalTypes2.ts, 50, 17))
>B1 : Symbol(B1, Decl(conditionalTypes2.ts, 52, 1))
>A1 : Symbol(A1, Decl(conditionalTypes2.ts, 48, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 50, 13))
}

interface B1<T> extends A1<T> {
>B1 : Symbol(B1, Decl(conditionalTypes2.ts, 52, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 54, 13))
>A1 : Symbol(A1, Decl(conditionalTypes2.ts, 48, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 54, 13))

    bat: B1<B1<T>>;
>bat : Symbol(B1.bat, Decl(conditionalTypes2.ts, 54, 31))
>B1 : Symbol(B1, Decl(conditionalTypes2.ts, 52, 1))
>B1 : Symbol(B1, Decl(conditionalTypes2.ts, 52, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 54, 13))

    boom: T extends any ? true : true
>boom : Symbol(B1.boom, Decl(conditionalTypes2.ts, 55, 19))
>T : Symbol(T, Decl(conditionalTypes2.ts, 54, 13))
}

